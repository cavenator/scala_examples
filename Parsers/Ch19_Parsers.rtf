{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww23560\viewh13440\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs24 \cf0 1)  \
import scala.util.parsing.combinator._\
\
class ExprParser extends RegexParsers \{\
	 val number = "[0-9]+".r\
\

\f1 	
\f0 def expr: Parser[Any] = term ~ opt(("+"|"-") ~ expr)\
	def term: Parser[Any] = factor ~ rep(("*"|"/"|"%") ~ factor)\
	def factor: Parser[Any] = number | "(" ~ expr ~ ")"\
\}\'ac\
\
2)  Redo this one.  The right-left association of exponent is wrong\
\
import scala.util.parsing.combinator._\
\
class ExprParser extends RegexParsers \{\

\f1 \uc0\u9656 
\f0  val number = "[0-9]+".r\
\

\f1 	
\f0 def expr: Parser[Any] = term ~ opt(("+"|"-") ~ expr)\

\f1 	
\f0 def term: Parser[Any] = factor ~ rep(("*"|"/"|"%") ~ factor)\

\f1 	
\f0 def factor: Parser[Any] = exponent | "(" ~ expr ~ ")"\

\f1 	
\f0 def exponent: Parser[Any] = number ~ opt("^" ~ exponent)\
\}\
\
3)  This can be refactored to be more concise.\
\
import scala.util.parsing.combinator._\
\
class ListParser extends RegexParsers \{\
\

\f1 	
\f0  val number = "[0-9]+".r\
\

\f1 	
\f0 def expr:Parser[List[Int]] = "(" ~> nums <~ ")"\

\f1 	
\f0 def nums: Parser[List[Int]] = num ~ rep("," ~ num ^^ \{.\

\f1 			
\f0 case "," ~ a => a.toInt\

\f1 		
\f0 \}) ^^ \{\

\f1 		
\f0 case a ~ List() => List(a)\'ac\

\f1 		
\f0 case a ~ b => List(a) ++ b\'ac\

\f1 	
\f0 \}\

\f1 	
\f0 def num: Parser[Int] = number ^^ \{(x:String) => x.toInt \}\
\}\
\
4)  Resultant code is only for YYYY-MM-DD (need to add the portion for time (hh:mm:ss))\
\
5)  Come back to this later\
\
6)  The exercise was to redo the expr parser to accommodate the right-left association of similar symbols (like the +/-.  The example 3-4-5 parsers correctly).\
import scala.util.parsing.combinator._\
\
class Expr\
case class Number(value: Int) extends Expr\
case class PartialOperator(op: String, right: Expr)\
case class Operator(op: String, left: Expr, right: Expr) extends Expr\
\
class ExprParser extends RegexParsers \{\
   val number = "[0-9]+".r\
\

\f1    
\f0 def expr: Parser[Expr] = term ~ rep(("+"|"-") ~ term ^^ \{\

\f1       
\f0 case "+" ~ t => PartialOperator("+", t)\

\f1       
\f0 case "-" ~ t => PartialOperator("-", t)\

\f1    
\f0 \}) ^^ \{\

\f1       
\f0 case a ~ list => list.foldLeft(a)\{(initial, x) => Operator(x.op, initial, x.right)  \}\

\f1    
\f0 \}\

\f1    
\f0 def term: Parser[Expr] = factor ~ opt("*" ~> factor) ^^ \{\

\f1       
\f0 case a ~ None => a\

\f1       
\f0 case a ~ Some(b) => Operator("*", a, b) \

\f1    
\f0 \}\

\f1    
\f0 def factor: Parser[Expr] = number ^^ (n => Number(n.toInt)) | "(" ~> expr <~ ")"\
\}\
\
7)  The expire parser needed to compute the entire sum of the expr lexicon.  Therefore, this is the major focus (ex: 3-4-5 computes correctly and so does 3-4+5-1)\
\
import scala.util.parsing.combinator._\
\
class ExprParser extends RegexParsers \{\

\f1    
\f0 val number = "[0-9]+".r\
\

\f1    
\f0 def expr: Parser[Int] = term ~ rep(("+"|"-") ~ term ^^ \{\

\f1       
\f0 case "+" ~ t => t\

\f1       
\f0 case "-" ~ t => -t\

\f1    
\f0 \}) ^^ \{\

\f1       
\f0 case a ~ list => list.foldLeft(a)\{(initial, x) => initial + x \}\

\f1    
\f0 \}\

\f1    
\f0 def term: Parser[Int] = factor ~ rep("*" ~> factor) ^^ \{\

\f1       
\f0 case a ~ List() => a\

\f1       
\f0 case a ~ b => a * b.product\

\f1    
\f0 \}\

\f1    
\f0 def factor: Parser[Int] = number ^^ (n => n.toInt) | "(" ~> expr <~ ")"\
\}}